define(["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function start() {
        dcl.subscribe('sceneStart');
    }
    exports.start = start;
    var privateState = {
        counter: 0
    };
    function spawnModel(modelName, coordinates, rotation) {
        if (rotation === void 0) { rotation = 0; }
        var GLTF_Shape = 54;
        var Transform_Component = 1;
        var EntityId = 'E' + privateState.counter.toString(16);
        var ShapeId = 'C' + privateState.counter.toString(16);
        privateState.counter++;
        dcl.componentCreated(ShapeId, 'engine.shape', GLTF_Shape);
        dcl.componentUpdated(ShapeId, JSON.stringify({
            withCollisions: true,
            visible: true,
            src: modelName
        }));
        dcl.addEntity(EntityId);
        dcl.attachEntityComponent(EntityId, 'engine.shape', ShapeId);
        var angle = rotation === 0 ? 0
            : rotation === 90 ? Math.PI / 4
                : rotation === 180 ? Math.PI / 2
                    : rotation === 270 ? Math.PI * 3 / 4
                        : rotation / 180 * Math.PI;
        dcl.updateEntityComponent(EntityId, 'engine.transform', Transform_Component, JSON.stringify({
            position: coordinates,
            rotation: { y: Math.sin(angle), x: 0, w: Math.cos(angle), z: 0 },
            scale: { x: 1, y: 1, z: 1 }
        }));
        dcl.setParent(EntityId, '0');
    }
    exports.spawnModel = spawnModel;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWljcm9saWIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJtaWNyb2xpYi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7SUFFQSxTQUFnQixLQUFLO1FBQ25CLEdBQUcsQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLENBQUE7SUFDN0IsQ0FBQztJQUZELHNCQUVDO0lBRUQsSUFBSSxZQUFZLEdBQUc7UUFDakIsT0FBTyxFQUFFLENBQUM7S0FDWCxDQUFBO0lBRUQsU0FBZ0IsVUFBVSxDQUFDLFNBQWlCLEVBQUUsV0FBZ0QsRUFBRSxRQUFZO1FBQVoseUJBQUEsRUFBQSxZQUFZO1FBQzFHLElBQUksVUFBVSxHQUFHLEVBQUUsQ0FBQTtRQUNuQixJQUFJLG1CQUFtQixHQUFHLENBQUMsQ0FBQTtRQUUzQixJQUFJLFFBQVEsR0FBRyxHQUFHLEdBQUcsWUFBWSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUE7UUFDdEQsSUFBSSxPQUFPLEdBQUcsR0FBRyxHQUFHLFlBQVksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFBO1FBQ3JELFlBQVksQ0FBQyxPQUFPLEVBQUUsQ0FBQTtRQUV0QixHQUFHLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLGNBQWMsRUFBRSxVQUFVLENBQUMsQ0FBQTtRQUN6RCxHQUFHLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUM7WUFDM0MsY0FBYyxFQUFFLElBQUk7WUFDcEIsT0FBTyxFQUFFLElBQUk7WUFDYixHQUFHLEVBQUUsU0FBUztTQUNmLENBQUMsQ0FBQyxDQUFBO1FBQ0gsR0FBRyxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQTtRQUN2QixHQUFHLENBQUMscUJBQXFCLENBQUMsUUFBUSxFQUFFLGNBQWMsRUFBRSxPQUFPLENBQUMsQ0FBQTtRQUM1RCxJQUFJLEtBQUssR0FBRyxRQUFRLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzVCLENBQUMsQ0FBQyxRQUFRLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxHQUFHLENBQUM7Z0JBQy9CLENBQUMsQ0FBQyxRQUFRLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxHQUFHLENBQUM7b0JBQ2hDLENBQUMsQ0FBQyxRQUFRLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxHQUFHLENBQUMsR0FBRyxDQUFDO3dCQUNwQyxDQUFDLENBQUMsUUFBUSxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFBO1FBRzVCLEdBQUcsQ0FBQyxxQkFBcUIsQ0FBQyxRQUFRLEVBQUUsa0JBQWtCLEVBQUUsbUJBQW1CLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQztZQUMxRixRQUFRLEVBQUUsV0FBVztZQUNyQixRQUFRLEVBQUUsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUU7WUFDaEUsS0FBSyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUU7U0FDNUIsQ0FBQyxDQUFDLENBQUE7UUFFSCxHQUFHLENBQUMsU0FBUyxDQUFDLFFBQVEsRUFBRSxHQUFHLENBQUMsQ0FBQTtJQUM5QixDQUFDO0lBOUJELGdDQThCQyIsInNvdXJjZXNDb250ZW50IjpbImRlY2xhcmUgdmFyIGRjbDogYW55XG5cbmV4cG9ydCBmdW5jdGlvbiBzdGFydCgpIHtcbiAgZGNsLnN1YnNjcmliZSgnc2NlbmVTdGFydCcpXG59XG5cbnZhciBwcml2YXRlU3RhdGUgPSB7XG4gIGNvdW50ZXI6IDBcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNwYXduTW9kZWwobW9kZWxOYW1lOiBzdHJpbmcsIGNvb3JkaW5hdGVzOiB7IHg6IG51bWJlciwgeTogbnVtYmVyLCB6OiBudW1iZXIgfSwgcm90YXRpb24gPSAwKSB7XG4gIHZhciBHTFRGX1NoYXBlID0gNTRcbiAgdmFyIFRyYW5zZm9ybV9Db21wb25lbnQgPSAxXG4gIFxuICB2YXIgRW50aXR5SWQgPSAnRScgKyBwcml2YXRlU3RhdGUuY291bnRlci50b1N0cmluZygxNilcbiAgdmFyIFNoYXBlSWQgPSAnQycgKyBwcml2YXRlU3RhdGUuY291bnRlci50b1N0cmluZygxNilcbiAgcHJpdmF0ZVN0YXRlLmNvdW50ZXIrK1xuICBcbiAgZGNsLmNvbXBvbmVudENyZWF0ZWQoU2hhcGVJZCwgJ2VuZ2luZS5zaGFwZScsIEdMVEZfU2hhcGUpXG4gIGRjbC5jb21wb25lbnRVcGRhdGVkKFNoYXBlSWQsIEpTT04uc3RyaW5naWZ5KHtcbiAgICB3aXRoQ29sbGlzaW9uczogdHJ1ZSxcbiAgICB2aXNpYmxlOiB0cnVlLFxuICAgIHNyYzogbW9kZWxOYW1lXG4gIH0pKVxuICBkY2wuYWRkRW50aXR5KEVudGl0eUlkKVxuICBkY2wuYXR0YWNoRW50aXR5Q29tcG9uZW50KEVudGl0eUlkLCAnZW5naW5lLnNoYXBlJywgU2hhcGVJZClcbiAgdmFyIGFuZ2xlID0gcm90YXRpb24gPT09IDAgPyAwXG4gICAgOiByb3RhdGlvbiA9PT0gOTAgPyBNYXRoLlBJIC8gNFxuICAgIDogcm90YXRpb24gPT09IDE4MCA/IE1hdGguUEkgLyAyXG4gICAgOiByb3RhdGlvbiA9PT0gMjcwID8gTWF0aC5QSSAqIDMgLyA0XG4gICAgOiByb3RhdGlvbiAvIDE4MCAqIE1hdGguUElcblxuICBcbiAgZGNsLnVwZGF0ZUVudGl0eUNvbXBvbmVudChFbnRpdHlJZCwgJ2VuZ2luZS50cmFuc2Zvcm0nLCBUcmFuc2Zvcm1fQ29tcG9uZW50LCBKU09OLnN0cmluZ2lmeSh7XG4gICAgcG9zaXRpb246IGNvb3JkaW5hdGVzLFxuICAgIHJvdGF0aW9uOiB7IHk6IE1hdGguc2luKGFuZ2xlKSwgeDogMCwgdzogTWF0aC5jb3MoYW5nbGUpLCB6OiAwIH0sXG4gICAgc2NhbGU6IHsgeDogMSwgeTogMSwgejogMSB9XG4gIH0pKVxuICBcbiAgZGNsLnNldFBhcmVudChFbnRpdHlJZCwgJzAnKVxufVxuIl19